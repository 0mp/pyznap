## Sample config file for pyznap. Save the config under /etc/pyznap/pyznap.conf or use the
## --config flag. Subfilesystem with different strategies need to have the keyword 'snap = no',
## else to many snapshots might be taken. For remote syncronisation subfilesystems should not
## have less snapshots than the root. Always keep enough snapshots on the destination. If
## there are no common snapshots the destination has to be destroyed and a full stream has to
## be sent. ssh locations are always specified with 'ssh:port:user@host:poolname/filesystem'.
## Port is optional, defaults to 22.
#
#
#
## Some example configs:
#
## Take regular snapsthos on a filesystem
# [rpool/filesystem]
# hourly = 24                           # Keep 24 hourly snapshots
# daily = 7                             # Keep 7 daily snapshots
# weekly = 4                            # Keep 4 weekly snapshots
# monthly = 6                           # Keep 6 monthly snapshots
# yearly = 1                            # Keep 1 yearly snapshot
# snap = yes                            # Take snapshots on this filesystem
# clean = yes                           # Delete old snapshots on this filesystem
# dest = backup/filesystem              # Backup this filesystem on this location
#
## Backup location
# [backup/filesystem]
# hourly = 48                           # Keep more older snapshots in backup location
# snap = no                             # Don't take new snapshots on backup location
# clean = yes                           # Delete old snapshots
#
## You can send backups to a remote location
# [rpool/data]
# hourly = 24
# snap = yes
# clean = yes
# dest = ssh:22:user@host:backup/data   # Specify ssh destination
# dest_keys = /home/user/.ssh/id_rsa    # Provide key for ssh login. If none given, look in home dir
#
## You can also take snapshots on a remote, but not sending to another dest
# [ssh:22:user@host:pool/data]
# key = /home/user/.ssh/id_rsa          # Provide key for ssh login. If none given, look in home dir
# hourly = 24
# snap = yes
# clean = yes
#
## You can give multiple dest. Filesystem will be sent to all of them
# [tank/data]
# hourly = 24
# snap = yes
# clean = yes
# dest = backup/data, ssh::user@host0:backup/data, ssh:22:user@host1:backup/data
# dest_keys = /home/user/.ssh/id_rsa, /home/user/.ssh/id_rsa
